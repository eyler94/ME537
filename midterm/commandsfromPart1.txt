test code for problem 3 in octave

plot3([0,0],[0,0],[0,1])
>> hold on
>> [1 0 0 4;
0 0 1 -3.5;
0 -1 0 0;
0 0 0 1]*[0;0;1;1]
ans =

   4.00000
  -2.50000
   0.00000
   1.00000

>> plot3([4,4],[-3.5,-2.5],[0,0])


code for problems 7 and 10 in python

np.cross(np.array([0,1,0]),np.array([0,0,2.5])-np.array([0,0,0.5]))
Out[11]: array([2., 0., 0.])

In [12]: np.cross(np.array([0,1,0]),np.array([0,0,2.5])-np.array([0,0,1]))
Out[12]: array([1.5, 0. , 0. ])

In [13]: np.cross(np.array([0,0,1]),np.array([0,0,2.5])-np.array([0,0,1]))
Out[13]: array([0., 0., 0.])

In [14]: np.cross(np.array([0,-1,0]),np.array([0,0,2.5])-np.array([0,0,1.5]))
Out[14]: array([-1.,  0.,  0.])

In [15]: np.cross(np.array([0,0,1]),np.array([0,0,2.5])-np.array([0,0,1.5]))
Out[15]: array([0., 0., 0.])

In [16]: np.cross(np.array([0,0,1]),np.array([0,0,1])-np.array([0,0,0]))
Out[16]: array([0, 0, 0])

In [17]: np.cross(np.array([0,1,0]),np.array([0,0,1])-np.array([0,0,0.5]))
Out[17]: array([0.5, 0. , 0. ])

In [18]: np.random.randint([6,6]).T
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-18-a96ea33e4b6c> in <module>()
----> 1 np.random.randint([6,6]).T

mtrand.pyx in mtrand.RandomState.randint()

TypeError: int() argument must be a string, a bytes-like object or a number, not 'list'

In [19]: np.random.randint(0,10,[6,6]).T
Out[19]: 
array([[4, 7, 1, 3, 6, 3],
       [1, 5, 7, 6, 7, 2],
       [2, 0, 4, 3, 3, 1],
       [9, 0, 5, 0, 3, 4],
       [4, 0, 0, 5, 6, 1],
       [0, 1, 2, 0, 8, 6]])

In [20]: np.random.randint(0,10,[6,6])
Out[20]: 
array([[4, 1, 7, 9, 5, 7],
       [2, 1, 5, 9, 5, 8],
       [0, 2, 0, 5, 8, 1],
       [2, 4, 0, 1, 3, 7],
       [7, 0, 5, 7, 6, 2],
       [9, 0, 2, 9, 8, 2]])

In [21]: clear


In [22]: np.array([[0, 2, 1.5, 0, -1, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 1, 1, 0, -1, 0],
    ...:           [1, 0, 0, 1, 0, 1]])
    ...:           
Out[22]: 
array([[ 0. ,  2. ,  1.5,  0. , -1. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  0. ],
       [ 0. ,  1. ,  1. ,  0. , -1. ,  0. ],
       [ 1. ,  0. ,  0. ,  1. ,  0. ,  1. ]])

In [23]: np.array([[0, 2, 1.5, 0, -1, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 1, 1, 0, -1, 0],
    ...:           [1, 0, 0, 1, 0, 1]]).T
    ...:           
Out[23]: 
array([[ 0. ,  0. ,  0. ,  0. ,  0. ,  1. ],
       [ 2. ,  0. ,  0. ,  0. ,  1. ,  0. ],
       [ 1.5,  0. ,  0. ,  0. ,  1. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  1. ],
       [-1. ,  0. ,  0. ,  0. , -1. ,  0. ],
       [ 0. ,  0. ,  0. ,  0. ,  0. ,  1. ]])

In [24]: np.array([[0, 2, 1.5, 0, -1, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 0, 0, 0, 0, 0],
    ...:           [0, 1, 1, 0, -1, 0],
    ...:           [1, 0, 0, 1, 0, 1]]).T @ np.array([[100],[0],[0],[0],[0],[0]])
    ...:           
Out[24]: 
array([[   0.],
       [ 200.],
       [ 150.],
       [   0.],
       [-100.],
       [   0.]])

